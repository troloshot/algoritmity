"""Так как дома расположены по кругу, мы не можем взять первый и последний.
        Поэтому нужно взять максимальное из того, что мы можем украсть из всех домов не считая первого
        и что мы можем украсть из всех домов не считая последнего.
    """
def robCircle(nums: List[int]) -> int:
    if len(nums) == 1: # если дом всего один, сразу возвращаем его значение
            return nums[0]
    if len(nums) == 2: # если дома два, возвращаем значение максимального дома
            return max(nums[0], nums[1])

    return max(my_darling(nums[1:]), my_darling(nums[:-1]))


def my_darling(nums: List[int]) -> int:         #Каждая ячейка - это максимальная сумма, которую мы можем украсть со всех домов до текущего, включая его
    dp = [0] * len(nums)
    dp[0] = nums[0]
    dp[1] = max(nums[0], nums[1])

    for i in range(2, len(nums)):
        dp[i] = max(dp[i - 1], dp[i - 2] + nums[i]) # проверяем что больше, значение предыдущей ячейки или текущей + пред-предыдущей

    return dp[-1]